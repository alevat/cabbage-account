defaultTasks 'clean', 'build', 'test', 'aggregate'

buildscript {

    repositories {
        jcenter()
        maven { url "https://plugins.gradle.org/m2/" }
    }

    dependencies {
        classpath "net.serenity-bdd:serenity-gradle-plugin:1.8.1"
        classpath "io.spring.gradle:dependency-management-plugin:1.0.4.RELEASE"
    }
}

apply plugin: 'java'
apply plugin: 'groovy'
apply from: "$rootDir/gradle/libraries.gradle"
apply plugin: 'io.spring.dependency-management'
apply plugin: 'net.serenity-bdd.aggregator'

repositories {
    jcenter()
    maven {url 'https://s3-us-west-2.amazonaws.com/dynamodb-local/release'}
}

sourceSets {
    integration_test {
        compileClasspath += main.output + test.output
        runtimeClasspath += main.output + test.output
    }
}

configurations {
    integration_testCompile.extendsFrom testCompile
    integration_testRuntime.extendsFrom testRuntime
}

task integrationTest(type: Test) {
    testClassesDirs = sourceSets.integration_test.output.classesDirs
    classpath = sourceSets.integration_test.runtimeClasspath
}

dependencies {

    dependencyManagement {
        imports {
            mavenBom 'com.amazonaws:aws-java-sdk-bom:1.11.268'
        }
    }

    compile libs.apache.http.core,
            libs.aws.dynamodb,
            libs.aws.lambda.core,
            libs.aws.lambda.events,
            libs.aws.lambda.log4j2,
            libs.guava,
            libs.jackson.annotations,
            libs.jackson.core,
            libs.jackson.databind,
            libs.jackson.jsr310,
            libs.javax.inject,
            libs.spring.core,
            libs.spring.context,
            libs.spring.awsLambda

    testCompile libs.test.serenity.core,
            libs.test.serenity.screenplay,
            libs.test.serenity.cucumber,
            libs.test.serenity.restAssured,
            libs.test.serenity.spring,
            libs.test.junit,
            libs.test.assertj,
            libs.test.spring.boot,
            libs.aws.dynamodbLocal,
            libs.spring.boot.web
}

task buildZip(type: Zip) {
    from compileJava
    from processResources
    into('lib') {
        from configurations.runtime
    }
}

build.dependsOn buildZip

task copyTestDependencies(type: Copy) {
    from configurations.testCompile
    include '*.dll'
    include '*.so'
    include '*.dylib'
    into "${buildDir}/libs/native"
}

test {
    testLogging.showStandardStreams = true
    systemProperties System.getProperties()
    environment "STAGE", "local"
    environment "PATH_PREFIX", "/v1"
}

test.dependsOn copyTestDependencies

gradle.startParameter.continueOnFailure = true

test.finalizedBy(aggregate)
integrationTest.finalizedBy(aggregate)