defaultTasks 'clean', 'build', 'check', 'aggregate'

buildscript {

    repositories {
        jcenter()
        maven { url "https://plugins.gradle.org/m2/" }
    }

    dependencies {
        classpath "net.serenity-bdd:serenity-gradle-plugin:1.8.1"
        classpath "io.spring.gradle:dependency-management-plugin:1.0.4.RELEASE"
    }
}

apply plugin: 'java'
apply plugin: 'groovy'

apply plugin: 'checkstyle'
apply plugin: 'findbugs'
apply plugin: 'pmd'

apply plugin: 'io.spring.dependency-management'
apply plugin: 'net.serenity-bdd.aggregator'

apply from: "$rootDir/gradle/libraries.gradle"
apply from: "$rootDir/gradle/code-coverage.gradle"

repositories {
    jcenter()
    maven {url 'https://s3-us-west-2.amazonaws.com/dynamodb-local/release'}
}

sourceSets {
    integration_test {
        compileClasspath += main.output + test.output
        runtimeClasspath += main.output + test.output
    }
}

configurations {
    integration_testCompile.extendsFrom testCompile
    integration_testRuntime.extendsFrom testRuntime
}
pmd {
    ignoreFailures = false
    ruleSets = [
            "java-basic",
            "java-braces",
            "java-design",
            "java-unusedcode"
    ]
}

tasks.withType(FindBugs) {
    task -> enabled = gradle.startParameter.taskNames.contains(task.name)
    reports {
        xml.enabled false
        html.enabled true
    }
}

tasks.withType(Checkstyle) {
    reports {
        xml.enabled false
        html.enabled true
    }
}
allprojects {
    apply plugin: 'idea'
    idea {
        module {
            inheritOutputDirs = false
            outputDir = file('build/classes/main')
            testOutputDir = file('build/classes/test')
        }
    }
}

task integrationTest(type: Test) {
    testClassesDirs = sourceSets.integration_test.output.classesDirs
    classpath = sourceSets.integration_test.runtimeClasspath
}

dependencies {

    dependencyManagement {
        imports {
            mavenBom 'com.amazonaws:aws-java-sdk-bom:1.11.268'
        }
    }

    compile libs.apache.http.core,
            libs.aws.dynamodb,
            libs.aws.lambda.core,
            libs.aws.lambda.events,
            libs.aws.lambda.log4j2,
            libs.google.guava,
            libs.google.guice,
            libs.google.guiceMultibindings,
            libs.jackson.annotations,
            libs.jackson.core,
            libs.jackson.databind,
            libs.jackson.jsr310,
            libs.javax.inject

    testCompile (libs.aws.dynamodbLocal) {
        exclude (group: 'org.eclipse.jetty.orbit', module: 'javax.servlet')
    }

    testCompile libs.spring.boot.web,
                libs.test.assertj,
                libs.test.junit,
                libs.test.serenity.core,
                libs.test.serenity.cucumber,
                libs.test.serenity.restAssured,
                libs.test.serenity.screenplay,
                libs.test.serenity.spring,
                libs.test.spring.boot
}

task buildZip(type: Zip) {
    from compileJava
    from processResources
    into('lib') {
        from configurations.runtime
    }
}

build.dependsOn buildZip

task copyTestDependencies(type: Copy) {
    from configurations.testCompile
    include '*.dll'
    include '*.so'
    include '*.dylib'
    into "${buildDir}/libs/native"
}

test {
    testLogging.showStandardStreams = true
    systemProperties System.getProperties()
    environment "STAGE", "local"
    environment "PATH_PREFIX", "/v1"
}

test.dependsOn copyTestDependencies

gradle.startParameter.continueOnFailure = true

test.finalizedBy(aggregate)
integrationTest.finalizedBy(aggregate)

ext.coverage = [
        excludes: [],
        limit: [
                line: 80,
                branch: 45
        ]
]