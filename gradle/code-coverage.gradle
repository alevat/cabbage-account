apply plugin: 'jacoco'

jacoco {
    toolVersion = "0.7.9"
}

jacocoTestReport {
    reports {
        xml.enabled true
        csv.enabled false
        html.enabled true
        html.destination "${reportsDir}/jacoco/html"
    }
    afterEvaluate {
        classDirectories = files(
                classDirectories.files.collect {
                    fileTree(dir: it, exclude: coverage.excludes)
                }
        )
    }
    doLast {
        def xmlReport = file("${jacoco.reportsDir}/test/jacocoTestReport.xml")
        logger.lifecycle("Checking coverage results: ${xmlReport}")

        def parser = new XmlParser()
        parser.setFeature("http://apache.org/xml/features/nonvalidating/load-external-dtd", false)
        parser.setFeature("http://apache.org/xml/features/disallow-doctype-decl", false)
        def results = parser.parse(xmlReport)

        def percentage = {
            if (it) {
                def covered = it.'@covered' as Double
                def missed = it.'@missed' as Double
                ((covered / (covered + missed)) * 100).round(2)
            } else {
                100
            }
        }

        def counters = results.counter
        def metrics = [:]
        metrics << [
                'instruction': percentage(counters.find { it.'@type'.equals('INSTRUCTION') }),
                'branch'     : percentage(counters.find { it.'@type'.equals('BRANCH') }),
                'line'       : percentage(counters.find { it.'@type'.equals('LINE') }),
                'complexity' : percentage(counters.find { it.'@type'.equals('COMPLEXITY') }),
                'method'     : percentage(counters.find { it.'@type'.equals('METHOD') }),
                'class'      : percentage(counters.find { it.'@type'.equals('CLASS') })
        ]

        def failures = []
        def coverageRates = []
        metrics.each {
            def limit = coverage.limit[it.key]
            if (limit != null) {
                if (it.value < limit) {
                    failures.add("- ${it.key} coverage rate is: ${it.value}%, minimum is ${limit}%")
                }
                coverageRates.add("- ${it.key} coverage rate is: ${it.value}%, minimum is ${limit}%")
            }
        }

        def htmlReport = file("${jacoco.reportsDir}/html/index.html")
        if (failures) {
            logger.quiet("------------------ Code Coverage Failed -----------------------")
            failures.each {
                logger.quiet(it)
            }
            logger.quiet("------------------ All Code Coverage Rates --------------------")
            coverageRates.each {
                logger.quiet(it)
            }
            logger.quiet("---------------------------------------------------------------")
            logger.lifecycle("Please check coverage report: ${htmlReport}")
            throw new GradleException("Code coverage failed")
        } else {
            logger.quiet("------------------ Code Coverage Passed -----------------------")
            coverageRates.each {
                logger.quiet(it)
            }
            logger.quiet("---------------------------------------------------------------")
            logger.quiet("Passed Code Coverage Checks: ${htmlReport}")
        }
    }
}
check.dependsOn jacocoTestReport

test {
    jacoco {
        append = false
        classDumpDir = file("$buildDir/jacoco/classpathdumps")
    }
    finalizedBy jacocoTestReport
}

jacocoTestReport {
    reports {
        html.destination file("${reportsDir}/jacoco/html")
    }
}
